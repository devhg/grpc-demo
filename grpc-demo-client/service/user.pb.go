// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: service/user.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserScore `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserScoreResponse) Reset() {
	*x = UserScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreResponse) ProtoMessage() {}

func (x *UserScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreResponse.ProtoReflect.Descriptor instead.
func (*UserScoreResponse) Descriptor() ([]byte, []int) {
	return file_service_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserScoreResponse) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserScore `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserScoreRequest) Reset() {
	*x = UserScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserScoreRequest) ProtoMessage() {}

func (x *UserScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserScoreRequest.ProtoReflect.Descriptor instead.
func (*UserScoreRequest) Descriptor() ([]byte, []int) {
	return file_service_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserScoreRequest) GetUsers() []*UserScore {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_service_user_proto protoreflect.FileDescriptor

var file_service_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x32, 0x99, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11,
	0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_user_proto_rawDescOnce sync.Once
	file_service_user_proto_rawDescData = file_service_user_proto_rawDesc
)

func file_service_user_proto_rawDescGZIP() []byte {
	file_service_user_proto_rawDescOnce.Do(func() {
		file_service_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_user_proto_rawDescData)
	})
	return file_service_user_proto_rawDescData
}

var file_service_user_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_user_proto_goTypes = []interface{}{
	(*UserScoreResponse)(nil), // 0: service.UserScoreResponse
	(*UserScoreRequest)(nil),  // 1: service.UserScoreRequest
	(*UserScore)(nil),         // 2: service.UserScore
}
var file_service_user_proto_depIdxs = []int32{
	2, // 0: service.UserScoreResponse.users:type_name -> service.UserScore
	2, // 1: service.UserScoreRequest.users:type_name -> service.UserScore
	1, // 2: service.UserScoreService.GetUserScoreByServerStream:input_type -> service.UserScoreRequest
	1, // 3: service.UserScoreService.GetUserScoreByClientStream:input_type -> service.UserScoreRequest
	1, // 4: service.UserScoreService.GetUserScoreByStream:input_type -> service.UserScoreRequest
	0, // 5: service.UserScoreService.GetUserScoreByServerStream:output_type -> service.UserScoreResponse
	0, // 6: service.UserScoreService.GetUserScoreByClientStream:output_type -> service.UserScoreResponse
	0, // 7: service.UserScoreService.GetUserScoreByStream:output_type -> service.UserScoreResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_user_proto_init() }
func file_service_user_proto_init() {
	if File_service_user_proto != nil {
		return
	}
	file_service_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_service_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_user_proto_goTypes,
		DependencyIndexes: file_service_user_proto_depIdxs,
		MessageInfos:      file_service_user_proto_msgTypes,
	}.Build()
	File_service_user_proto = out.File
	file_service_user_proto_rawDesc = nil
	file_service_user_proto_goTypes = nil
	file_service_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserScoreServiceClient is the client API for UserScoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserScoreServiceClient interface {
	//服务端流模式
	GetUserScoreByServerStream(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByServerStreamClient, error)
	//客户端流模式
	GetUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByClientStreamClient, error)
	//双向流模式
	GetUserScoreByStream(ctx context.Context, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByStreamClient, error)
}

type userScoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserScoreServiceClient(cc grpc.ClientConnInterface) UserScoreServiceClient {
	return &userScoreServiceClient{cc}
}

func (c *userScoreServiceClient) GetUserScoreByServerStream(ctx context.Context, in *UserScoreRequest, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserScoreService_serviceDesc.Streams[0], "/service.UserScoreService/GetUserScoreByServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userScoreServiceGetUserScoreByServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserScoreService_GetUserScoreByServerStreamClient interface {
	Recv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userScoreServiceGetUserScoreByServerStreamClient struct {
	grpc.ClientStream
}

func (x *userScoreServiceGetUserScoreByServerStreamClient) Recv() (*UserScoreResponse, error) {
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userScoreServiceClient) GetUserScoreByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserScoreService_serviceDesc.Streams[1], "/service.UserScoreService/GetUserScoreByClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userScoreServiceGetUserScoreByClientStreamClient{stream}
	return x, nil
}

type UserScoreService_GetUserScoreByClientStreamClient interface {
	Send(*UserScoreRequest) error
	CloseAndRecv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userScoreServiceGetUserScoreByClientStreamClient struct {
	grpc.ClientStream
}

func (x *userScoreServiceGetUserScoreByClientStreamClient) Send(m *UserScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userScoreServiceGetUserScoreByClientStreamClient) CloseAndRecv() (*UserScoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userScoreServiceClient) GetUserScoreByStream(ctx context.Context, opts ...grpc.CallOption) (UserScoreService_GetUserScoreByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserScoreService_serviceDesc.Streams[2], "/service.UserScoreService/GetUserScoreByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userScoreServiceGetUserScoreByStreamClient{stream}
	return x, nil
}

type UserScoreService_GetUserScoreByStreamClient interface {
	Send(*UserScoreRequest) error
	Recv() (*UserScoreResponse, error)
	grpc.ClientStream
}

type userScoreServiceGetUserScoreByStreamClient struct {
	grpc.ClientStream
}

func (x *userScoreServiceGetUserScoreByStreamClient) Send(m *UserScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userScoreServiceGetUserScoreByStreamClient) Recv() (*UserScoreResponse, error) {
	m := new(UserScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserScoreServiceServer is the server API for UserScoreService service.
type UserScoreServiceServer interface {
	//服务端流模式
	GetUserScoreByServerStream(*UserScoreRequest, UserScoreService_GetUserScoreByServerStreamServer) error
	//客户端流模式
	GetUserScoreByClientStream(UserScoreService_GetUserScoreByClientStreamServer) error
	//双向流模式
	GetUserScoreByStream(UserScoreService_GetUserScoreByStreamServer) error
}

// UnimplementedUserScoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserScoreServiceServer struct {
}

func (*UnimplementedUserScoreServiceServer) GetUserScoreByServerStream(*UserScoreRequest, UserScoreService_GetUserScoreByServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByServerStream not implemented")
}
func (*UnimplementedUserScoreServiceServer) GetUserScoreByClientStream(UserScoreService_GetUserScoreByClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByClientStream not implemented")
}
func (*UnimplementedUserScoreServiceServer) GetUserScoreByStream(UserScoreService_GetUserScoreByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserScoreByStream not implemented")
}

func RegisterUserScoreServiceServer(s *grpc.Server, srv UserScoreServiceServer) {
	s.RegisterService(&_UserScoreService_serviceDesc, srv)
}

func _UserScoreService_GetUserScoreByServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserScoreServiceServer).GetUserScoreByServerStream(m, &userScoreServiceGetUserScoreByServerStreamServer{stream})
}

type UserScoreService_GetUserScoreByServerStreamServer interface {
	Send(*UserScoreResponse) error
	grpc.ServerStream
}

type userScoreServiceGetUserScoreByServerStreamServer struct {
	grpc.ServerStream
}

func (x *userScoreServiceGetUserScoreByServerStreamServer) Send(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserScoreService_GetUserScoreByClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserScoreServiceServer).GetUserScoreByClientStream(&userScoreServiceGetUserScoreByClientStreamServer{stream})
}

type UserScoreService_GetUserScoreByClientStreamServer interface {
	SendAndClose(*UserScoreResponse) error
	Recv() (*UserScoreRequest, error)
	grpc.ServerStream
}

type userScoreServiceGetUserScoreByClientStreamServer struct {
	grpc.ServerStream
}

func (x *userScoreServiceGetUserScoreByClientStreamServer) SendAndClose(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userScoreServiceGetUserScoreByClientStreamServer) Recv() (*UserScoreRequest, error) {
	m := new(UserScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserScoreService_GetUserScoreByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserScoreServiceServer).GetUserScoreByStream(&userScoreServiceGetUserScoreByStreamServer{stream})
}

type UserScoreService_GetUserScoreByStreamServer interface {
	Send(*UserScoreResponse) error
	Recv() (*UserScoreRequest, error)
	grpc.ServerStream
}

type userScoreServiceGetUserScoreByStreamServer struct {
	grpc.ServerStream
}

func (x *userScoreServiceGetUserScoreByStreamServer) Send(m *UserScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userScoreServiceGetUserScoreByStreamServer) Recv() (*UserScoreRequest, error) {
	m := new(UserScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserScoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.UserScoreService",
	HandlerType: (*UserScoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserScoreByServerStream",
			Handler:       _UserScoreService_GetUserScoreByServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserScoreByClientStream",
			Handler:       _UserScoreService_GetUserScoreByClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserScoreByStream",
			Handler:       _UserScoreService_GetUserScoreByStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/user.proto",
}
